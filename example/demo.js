(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _index = require('../package/index.js');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener('DOMContentLoaded', function (e) {
  var view = document.getElementById('view');

  var ud = (0, _index2.default)({
    speed: 100
  }, 'one');
  var ud2 = (0, _index2.default)({
    speed: 400
  }, 'two');

  // window.ud = ud
  window.ud2 = ud2;

  // ud.on('up', () => view.innerHTML = 'up')
  // ud.on('down', () => view.innerHTML = 'down')

  ud.on('up', function () {
    return console.log('ud up');
  });
  ud.on('down', function () {
    return console.log('ud down');
  });

  ud2.on('up', function () {
    return console.log('ud2 up');
  });
  ud2.on('down', function () {
    return console.log('ud2 down');
  });
});

},{"../package/index.js":2}],2:[function(require,module,exports){
'use strict';var _extends=Object.assign||function(a){for(var c,b=1;b<arguments.length;b++)for(var d in c=arguments[b],c)Object.prototype.hasOwnProperty.call(c,d)&&(a[d]=c[d]);return a},_srraf=require('srraf'),_srraf2=_interopRequireDefault(_srraf),_loop=require('loop.js'),_loop2=_interopRequireDefault(_loop);Object.defineProperty(exports,'__esModule',{value:!0});function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _objectWithoutProperties(a,b){var d={};for(var c in a)0<=b.indexOf(c)||Object.prototype.hasOwnProperty.call(a,c)&&(d[c]=a[c]);return d}exports.default=function(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{},b=arguments[1],c=null,d=0,e=0,f=(0,_loop2.default)();return _extends({},function g(h){var j=h.speed,k=j===void 0?50:j,l=_objectWithoutProperties(h,['speed']);return _srraf2.default?_srraf2.default.scroll.use(function(m){var n=m.curr,o=m.prev,p=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{timeStamp:0};d=p.timeStamp-e,e=p.timeStamp;var q=Math.abs(n-o),r=(q/d||0)*(a.interval||100),s=r>k,t=function(u){c=u,f.emit(u)};n>=o&&'down'!==c&&s?t('down'):n<=o&&'up'!==c&&s&&t('up')}).update():{}}(a),f,{get position(){return c}})};

},{"loop.js":3,"srraf":4}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = function () {
  var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var listeners = {};

  var on = function on(e) {
    var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!cb) return;
    listeners[e] = listeners[e] || { queue: [] };
    listeners[e].queue.push(cb);
  };

  var emit = function emit(e) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var items = listeners[e] ? listeners[e].queue : false;
    items && items.forEach(function (i) {
      return i(data);
    });
  };

  return _extends({}, o, {
    emit: emit,
    on: on
  });
};
},{}],4:[function(require,module,exports){
'use strict';var _createClass=function(){function e(i,n){for(var o,p=0;p<n.length;p++)o=n[p],o.enumerable=o.enumerable||!1,o.configurable=!0,'value'in o&&(o.writable=!0),Object.defineProperty(i,o.key,o)}return function(i,n,o){return n&&e(i.prototype,n),o&&e(i,o),i}}();Object.defineProperty(exports,'__esModule',{value:!0});function _classCallCheck(e,i){if(!(e instanceof i))throw new TypeError('Cannot call a class as a function')}var scrollInstance=null,resizeInstance=null,Listener=function(){function e(i){_classCallCheck(this,e),this.type=i,this.pool=0,this.queue=[],this.curr=this.position(),this.prev=this.position(),this.ticking=!1,window.addEventListener(i,this.requestFrame.bind(this))}return _createClass(e,[{key:'position',value:function(){return'scroll'===this.type?window.scrollY||window.pageYOffset:window.innerWidth}},{key:'requestFrame',value:function(n){this.e=n,this.curr=this.position(),this.ticking||(window.requestAnimationFrame(this.run.bind(this)),this.ticking=!0)}},{key:'run',value:function(){var n=this;this.queue.forEach(function(o){return o[1]({curr:n.curr,prev:n.prev},n.e)}),this.prev=this.curr,this.ticking=!1}},{key:'use',value:function(n){var o=this,p=o.pool++;return o.queue.push([p,n]),{destroy:function(){return o.queue.forEach(function(r,s){r[0]===p&&o.queue.splice(s,1)}),this},update:function(){return n({curr:o.curr,prev:o.prev},o.e),this}}}},{key:'update',value:function(){this.run()}}]),e}();exports.default='undefined'==typeof window?null:{get scroll(){return scrollInstance||(scrollInstance=new Listener('scroll')),scrollInstance},get resize(){return resizeInstance||(resizeInstance=new Listener('resize')),resizeInstance},use:function(i){var n=this.scroll,o=n.curr,p=n.prev,q=this.resize,r=q.curr,s=q.prev,t={currY:o,prevY:p,currX:r,prevX:s},u=this.scroll.use(function(w,x){var y=w.curr,z=w.prev;t.currY=y,t.prevY=z,i(t,x)}),v=this.resize.use(function(w,x){var y=w.curr,z=w.prev;t.currX=y,t.prevX=z,i(t,x)});return{destroy:function(){return u.destroy(),v.destroy(),this},update:function(){return u.update(),v.update(),this}}}};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
